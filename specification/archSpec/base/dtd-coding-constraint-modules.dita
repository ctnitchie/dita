<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="constraintsDomainDesignPattern-dtd" xml:lang="en-us" >
  <title>DTD: Coding requirements for
    <?oxy_delete author="chris" timestamp="20200705T183522-0400" content="constraint"?><?oxy_insert_start author="chris" timestamp="20200705T183522-0400"?>content
    model specialization<?oxy_insert_end?> modules</title>
  <shortdesc>A
    <?oxy_delete author="chris" timestamp="20200705T183539-0400" content="structural "?><?oxy_delete author="chris" timestamp="20200705T183528-0400" content="constraint"?><?oxy_insert_start author="chris" timestamp="20200705T183528-0400"?>content
    model specialization<?oxy_insert_end?> module defines the
    constraints<?oxy_insert_start author="chris" timestamp="20200705T183547-0400"?> and
    mix-ins<?oxy_insert_end?> for a map or topic element
    type.<?oxy_delete author="chris" timestamp="20200705T183624-0400" content=" A domain constraint module defines the constraints for an element or attribute domain."?></shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>coding
              requirements<indexterm>DTD<indexterm><?oxy_delete author="chris" timestamp="20200705T183634-0400" content="constraints"?><?oxy_insert_start author="chris" timestamp="20200705T183634-0400"?>content
              model specializations<?oxy_insert_end?></indexterm></indexterm></indexterm>
        <indexterm><?oxy_delete author="chris" timestamp="20200705T183647-0400" content="constraints"?><?oxy_insert_start author="chris" timestamp="20200705T183647-0400"?>content
          model specializations<?oxy_insert_end?><indexterm>DTD<indexterm>coding
              requirements</indexterm><indexterm>integrating into document type
            shells</indexterm></indexterm></indexterm>
        <indexterm><?oxy_delete author="chris" timestamp="20200705T183702-0400" content="domain constraint modules"?><?oxy_insert_start author="chris" timestamp="20200705T183702-0400"?>content
          model specializations<?oxy_insert_end?><indexterm>DTD<indexterm>coding
              requirements</indexterm></indexterm></indexterm>
        <indexterm>file
              names<indexterm>DTD<indexterm><?oxy_delete author="chris" timestamp="20200705T183708-0400" content="domain constraint modules"?><?oxy_insert_start author="chris" timestamp="20200705T183708-0400"?>content
              model
            specializations<?oxy_insert_end?></indexterm><?oxy_delete author="chris" timestamp="20200705T183717-0400" content="&lt;indexterm&gt;structural constraint modules&lt;/indexterm&gt;"?></indexterm></indexterm>
        <?oxy_delete author="chris" timestamp="20200705T183730-0400" content="&lt;indexterm&gt;structural constraint modules&lt;indexterm&gt;DTD&lt;indexterm&gt;coding requirements&lt;/indexterm&gt;&lt;/indexterm&gt;&lt;/indexterm&gt;"?>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <section id="structural">
      <title><?oxy_delete author="chris" timestamp="20200705T183742-0400" content="Structural constraint"?><?oxy_insert_start author="chris" timestamp="20200705T183742-0400"?>Content
        model specialization<?oxy_insert_end?> modules</title>
      <p><?oxy_delete author="chris" timestamp="20200705T183749-0400" content="Structural constraint"?><?oxy_insert_start author="chris" timestamp="20200705T183749-0400"?>Content
        model specialization<?oxy_insert_end?> modules have the following requirements:</p>
      <dl>
        <dlentry>
          <dt>The <codeph><varname>tagname</varname>.attributes</codeph> parameter entity</dt>
          <dd>
            <p>When the attribute set for an element is
              <?oxy_delete author="chris" timestamp="20200705T183806-0400" content="constrained"?><?oxy_insert_start author="chris" timestamp="20200705T183806-0400"?>modified<?oxy_insert_end?>,
              there <ph>must</ph> be a declaration of the
                <codeph><varname>tagname</varname>.attributes</codeph> parameter entity that defines
              the
              <?oxy_delete author="chris" timestamp="20200705T183817-0400" content="constrained"?><?oxy_insert_start author="chris" timestamp="20200705T183817-0400"?>modified<?oxy_insert_end?>
              attributes.</p>
            <p otherprops="examples">For example, the following parameter entity defines a
              constrained set of attributes for the <xmlelement>note</xmlelement> element that
              removes most of the values defined for <xmlatt>type</xmlatt>, and also removes
                <xmlatt>spectitle</xmlatt> and
              <xmlatt>othertype</xmlatt><?oxy_insert_start author="chris" timestamp="20200705T183845-0400"?>,
              and adds the attribute from a <codeph>shading</codeph> mix-in attribute
              domain<?oxy_insert_end?>:</p>
            <codeblock>&lt;!ENTITY % note.attributes  
       "type  (attention | caution | note ) #IMPLIED<?oxy_insert_start author="chris" timestamp="20200705T184002-0400"?>
        %shading-d-attribute-mixin;<?oxy_insert_end?>
        %univ-atts;"&gt;</codeblock>
          </dd>
        </dlentry>
        <dlentry>
          <dt>The <codeph><varname>tagname</varname>.content</codeph> parameter entity</dt>
          <dd>
            <p><ph>When the content model for an element is
                <?oxy_delete author="chris" timestamp="20200705T184115-0400" content="constrained"?><?oxy_insert_start author="chris" timestamp="20200705T184115-0400"?>modified<?oxy_insert_end?>,</ph>
              there <ph>must</ph> be a declaration of the
                <codeph><varname>tagname</varname>.content</codeph> parameter entity that defines
              the
              <?oxy_delete author="chris" timestamp="20200705T184129-0400" content="constrained"?><?oxy_insert_start author="chris" timestamp="20200705T184129-0400"?>modified<?oxy_insert_end?>
              content model.</p>
            <p otherprops="examples">For example, the following parameter entity defines a
              <?oxy_delete author="chris" timestamp="20200705T184349-0400" content="more restricted"?><?oxy_insert_start author="chris" timestamp="20200705T184349-0400"?>modified<?oxy_insert_end?>
              content model for <xmlelement>topic</xmlelement>, in which the
                <xmlelement>shortdesc</xmlelement> element is
              required<?oxy_insert_start author="chris" timestamp="20200705T184411-0400"?> and a
                <xmlelement>nomarkuptitle</xmlelement> mix-in replaces
                <xmlelement>title</xmlelement><?oxy_insert_end?>.<codeblock>&lt;!ENTITY % topic.content 

  "((%<?oxy_delete author="chris" timestamp="20200705T184618-0400" content="title"?><?oxy_insert_start author="chris" timestamp="20200705T184618-0400"?>nomarkup-d-title-mixin<?oxy_insert_end?>;), 
    (%titlealts;)?, 
    (%shortdesc;), 
    (%prolog;)?, 
    (%body;)?, 
    (%topic-info-types;)*)"
></codeblock></p>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="domain">
      <title>Domain constraint modules</title>
      <p>Domain constraint modules have the following requirements:</p>
      <dl>
        <dlentry>
          <dt>Parameter entity</dt>
          <dd>
            <p><ph>When the set of extension elements are restricted, there must</ph> be a parameter
              entity that defines the constrained content model.</p>
            <p otherprops="examples">For example, the following parameter entity restricts the
              highlighting domain to <xmlelement>b</xmlelement> and <xmlelement>i</xmlelement>:</p>
            <codeblock>
&lt;!ENTITY % HighlightingDomain-c-ph     "b | i"  ></codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="remove-base-element">
      <title>Constraining to replace a base element with domain extensions</title>
      <p>When element domains are used to extend a base element, those extensions can be used to
        replace the base element. This form of constraint is done inside the document-type
        shell.</p>
      <p>Within a document-type shell, <xref
          href="dtd-coding-doctype-shell.dita#shell-dtd-coding-reqs/domain-extensions">domain
          extensions</xref> are implemented by declaring an entity for a base element. The value of
        the entity can omit any base element types from which the other element types that are
        listed are specialized.</p>
      <p otherprops="examples">In the following example, the <xmlelement>pre</xmlelement> base type
        is removed from the entity declaration, effectively allowing only specializations of
          <xmlelement>pre</xmlelement> but not <xmlelement>pre</xmlelement> itself.<codeblock otherprops="examples"><![CDATA[<!ENTITY % pre
    "%pr-d-pre; | 
     %sw-d-pre; | 
     %ui-d-pre;">]]></codeblock></p>
    </section>
  </conbody>
</concept>

<?oxy_options track_changes="on"?>