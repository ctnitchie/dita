<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="example-entry-attribute-mixin" rev="2.0-Issue15">
    <title>Example: Adding an attribute to table elements</title>
    <shortdesc>In this scenario, a company makes extensive use of complex tables to present product
        listings. They occasionally highlight individual cells, rows, or columns for various
        purposes. A content architect wishes to implement a semantically meaningful way to identify
        the <xmlatt>cell-purpose</xmlatt> of various table elements.</shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm>mix-ins<indexterm>examples<indexterm>adding
                        attributes</indexterm></indexterm></indexterm>
                <indexterm>examples<indexterm>mix-ins<indexterm>adding
                        attributes</indexterm></indexterm></indexterm>
            </keywords>
        </metadata>
    </prolog>
    <conbody>
        <example>
            <ol id="ol_y21_cyw_dmb">
                <li>First, the content architect creates the mix-in module for the
                        <xmlatt>cell-purpose</xmlatt> attribute,
                        <filepath>acme-cellPurposeAttMixinDomain.ent</filepath>.<codeblock>&lt;!-- Define the attribute -->
&lt;!ENTITY % cellPurposeAtt-d-attribute-mixin
  "cell-purpose  (sale | out-of-stock | new | last-chance | inherit | none)  #IMPLIED"
&gt;

&lt;!-- Declare the entity to be used in the @specializations attribute -->
&lt;!ENTITY cellPurposeAtt-d-att "@props/cell-purpose" >

&lt;!-- Add the attribute to the desired elements. -->
&lt;!ATTLIST entry %cellPurposeAtt-d-attribute-mixin;>
&lt;!ATTLIST row %cellPurposeAtt-d-attribute-mixin;>
&lt;!ATTLIST colspec %cellPurposeAtt-d-attribute-mixin;>
&lt;!ATTLIST strow %cellPurposeAtt-d-attribute-mixin;>
&lt;!ATTLIST stentry %cellPurposeAtt-d-attribute-mixin;></codeblock><note>The
                        attribute definition entity ends in <codeph>-mixin</codeph>, indicating that
                        this is a mix-in attribute, and should not be included in the
                            <parameterentity>base-attribute-extensions</parameterentity> entity in
                        the document type shell.</note><note>In this example, the attribute
                        declaration and its assignment to elements are combined into the same
                        module. A more robust approach would be to separate each
                            <codeph>&lt;!ATTLIST</codeph> declaration in its own separate mix-in
                        module, thus allowing document type shell authors to decide the elements to
                        which to apply the attribute. However, this formulation is also acceptable,
                        and is used here for simplicity.</note></li>
                <li>The content architect integrates this module into the document type
                    shell.<codeblock>&lt;!-- ============================================================= -->
&lt;!--             DOMAIN ATTRIBUTES DECLARATIONS                    -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % cellPurposeAttMixin-d-dec
  PUBLIC "-//ACME//ENTITIES DITA Cell Purpose Attribute Mix-in//EN"
         "cellPurposeAttMixinDomain.ent"
>%cellPurposeAttMixin-d-dec;</codeblock></li>
                <li>After updating the <filepath>catalog.xml</filepath> file to include the new
                    domain modules and the mix-in module, the work is done.</li>
            </ol>
        </example>
    </conbody>
</concept>
